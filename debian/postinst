#!/bin/sh
set -e

# Source debian helper functions
. /usr/share/debconf/confmodule

# Create distiller user and group if they don't exist
if ! getent group distiller >/dev/null 2>&1; then
    addgroup --system distiller
fi

if ! getent passwd distiller >/dev/null 2>&1; then
    adduser --system --ingroup distiller --home /opt/distiller-mcp-hub --shell /bin/bash distiller
fi

# Set up directories and permissions
install -d -o distiller -g distiller -m 755 /var/log/distiller-mcp-hub
find /opt/distiller-mcp-hub -type f -exec chown distiller:distiller {} \;
find /opt/distiller-mcp-hub -type d -exec chown distiller:distiller {} \;
chmod +x /usr/bin/manage_mcp_service.sh
chmod +x /opt/distiller-mcp-hub/venv_wrapper.sh

# Create recordings directory for mic MCP
install -d -o distiller -g distiller -m 755 /opt/distiller-mcp-hub/projects/mic-mcp/recordings

# Create TTS output directory for speaker MCP
install -d -m 1777 /tmp/tts_output

# Set up audio permissions for distiller user
usermod -a -G audio distiller

# Install uv if not available
UV_BINARY=""
if command -v uv >/dev/null 2>&1; then
    UV_BINARY="uv"
elif [ -f "/usr/local/bin/uv" ] && [ -x "/usr/local/bin/uv" ]; then
    UV_BINARY="/usr/local/bin/uv"
    export PATH="/usr/local/bin:$PATH"
else
    # Install uv system-wide
    if ! curl -LsSf https://astral.sh/uv/install.sh | sh >/dev/null 2>&1; then
        echo "Error: Failed to install uv package manager"
        exit 1
    fi
    
    # Make uv available system-wide
    if [ -f "/root/.local/bin/uv" ]; then
        # Only copy if the target doesn't exist or is different
        if [ ! -f "/usr/local/bin/uv" ] || ! cmp -s "/root/.local/bin/uv" "/usr/local/bin/uv"; then
            cp /root/.local/bin/uv /usr/local/bin/uv 2>/dev/null || true
        fi
        if [ ! -f "/usr/local/bin/uvx" ] || ! cmp -s "/root/.local/bin/uvx" "/usr/local/bin/uvx"; then
            cp /root/.local/bin/uvx /usr/local/bin/uvx 2>/dev/null || true
        fi
        chmod +x /usr/local/bin/uv /usr/local/bin/uvx 2>/dev/null || true
        UV_BINARY="/usr/local/bin/uv"
        export PATH="/usr/local/bin:$PATH"
    else
        echo "Error: uv installation failed"
        exit 1
    fi
fi

# Verify uv installation
if [ -n "$UV_BINARY" ] && [ -x "$UV_BINARY" ]; then
    true # uv is available
elif command -v uv >/dev/null 2>&1; then
    UV_BINARY="uv"
else
    echo "Error: uv is not available after installation"
    exit 1
fi

# Set up SDK environment for virtual environment creation if available
export ORIGINAL_PYTHONPATH="${PYTHONPATH:-}"
export ORIGINAL_LD_LIBRARY_PATH="${LD_LIBRARY_PATH:-}"

if [ -d "/opt/distiller-cm5-sdk" ]; then
    export PYTHONPATH="/opt/distiller-cm5-sdk:/opt/distiller-cm5-sdk/src:${PYTHONPATH:-}"
    if [ -d "/opt/distiller-cm5-sdk/lib" ]; then
        export LD_LIBRARY_PATH="/opt/distiller-cm5-sdk/lib:${LD_LIBRARY_PATH:-}"
    fi
fi

# Create main hub virtual environment with Python 3.11
HUB_VENV_PATH="/opt/distiller-mcp-hub/.venv"
rm -rf "$HUB_VENV_PATH" 2>/dev/null || true
cd /opt/distiller-mcp-hub
"$UV_BINARY" venv "$HUB_VENV_PATH" --python python3.11 --system-site-packages >/dev/null 2>&1

# Set ownership of virtual environment
chown -R distiller:distiller "$HUB_VENV_PATH"

# Install hub dependencies using uv sync
cd /opt/distiller-mcp-hub
"$UV_BINARY" sync >/dev/null 2>&1

# Set proper ownership after installation
chown -R distiller:distiller "$HUB_VENV_PATH"
[ -f "/opt/distiller-mcp-hub/uv.lock" ] && chown distiller:distiller "/opt/distiller-mcp-hub/uv.lock" || true

# Create per-project virtual environments
for project in camera-mcp mic-mcp speaker-mcp; do
    PROJECT_VENV_PATH="/opt/distiller-mcp-hub/projects/$project/.venv"
    rm -rf "$PROJECT_VENV_PATH" 2>/dev/null || true
    cd "/opt/distiller-mcp-hub/projects/$project"
    "$UV_BINARY" venv "$PROJECT_VENV_PATH" --python python3.11 --system-site-packages >/dev/null 2>&1
    "$UV_BINARY" sync >/dev/null 2>&1
    chown -R distiller:distiller "$PROJECT_VENV_PATH"
    [ -f "/opt/distiller-mcp-hub/projects/$project/uv.lock" ] && chown distiller:distiller "/opt/distiller-mcp-hub/projects/$project/uv.lock" || true
done

# Restore original environment variables
export PYTHONPATH="$ORIGINAL_PYTHONPATH"
export LD_LIBRARY_PATH="$ORIGINAL_LD_LIBRARY_PATH"

# Verify installations
HUB_PYTHON="/opt/distiller-mcp-hub/.venv/bin/python"
if [ ! -f "$HUB_PYTHON" ]; then
    echo "Error: Hub virtual environment setup failed"
    exit 1
fi

for project in camera-mcp mic-mcp speaker-mcp; do
    PROJECT_PYTHON="/opt/distiller-mcp-hub/projects/$project/.venv/bin/python"
    if [ ! -f "$PROJECT_PYTHON" ]; then
        echo "Error: $project virtual environment setup failed"
        exit 1
    fi
done

# Test SDK imports if available (silent)
if [ -d "/opt/distiller-cm5-sdk" ]; then
    cd /opt/distiller-mcp-hub/projects/mic-mcp
    PROJECT_PYTHON="/opt/distiller-mcp-hub/projects/mic-mcp/.venv/bin/python"
    "$PROJECT_PYTHON" -c "from sdk_imports import import_parakeet" >/dev/null 2>&1 || true
    
    cd /opt/distiller-mcp-hub/projects/speaker-mcp
    PROJECT_PYTHON="/opt/distiller-mcp-hub/projects/speaker-mcp/.venv/bin/python"
    "$PROJECT_PYTHON" -c "from sdk_imports import import_piper" >/dev/null 2>&1 || true
fi

# Reload systemd and enable service
systemctl daemon-reload

# Installation complete message
if [ "$1" = "configure" ]; then
    if [ -z "$2" ] || dpkg --compare-versions "$2" ge "0.1.0"; then
        echo "Distiller MCP Hub installed successfully!"
        echo ""
        echo "To manage the service:"
        echo "  manage_mcp_service.sh {start|stop|restart|status|logs}"
        echo ""
        echo "Configuration: /opt/distiller-mcp-hub/mcp_config.json"
        echo "Logs: sudo journalctl -u mcp.service"
        echo ""
        if [ -d "/opt/distiller-cm5-sdk" ]; then
            echo "Hardware functionality enabled (distiller-cm5-sdk detected)"
        else
            echo "Install distiller-cm5-sdk package for full hardware functionality"
        fi
    fi
fi

#DEBHELPER# 
